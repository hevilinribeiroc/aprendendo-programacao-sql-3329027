CREATE TABLE TB_ALUNO (
  CODIGO_ALUNO INTEGER(3) PRIMARY KEY,
  NOME_ALUNO VARCHAR(60) NOT NULL,
  ANO_NASCIMENTO YEAR,
  EMAIL VARCHAR(60),
  SEXO VARCHAR(1) NOT NULL
);

CREATE TABLE TB_CURSO(
  CODIGO_CURSO INTEGER(3) PRIMARY KEY,
  NOME_CURSO VARCHAR(60) NOT NULL
);

CREATE TABLE TB_MATRICULA(
CODIGO_CURSO INTEGER(3),
CODIGO_ALUNO INTEGER(3),
FOREIGN KEY (CODIGO_CURSO) REFERENCES CURSO(CODIGO_CURSO),
FOREIGN KEY (CODIGO_ALUNO) REFERENCES ALUNO(CODIGO_ALUNO)
);


INSERT INTO TB_ALUNO(
  CODIGO_ALUNO, 
  NOME_ALUNO,
  ANO_NASCIMENTO,
  EMAIL,
  SEXO)
VALUES
(1, 'Josiel Jardim', '1974', 'josiel@provaSQL.com.br', 'M'),
(2, 'Ana Maria', '1980', 'ana@provaSQL.com.br', 'F'),
(3, 'João Pedro', '1979', 'joao@provaSQL.com.br', 'M')

INSERT INTO TB_CURSO(
  CODIGO_CURSO,
  NOME_CURSO)
VALUES
(1, 'Medicina'),
(2, 'Arquitetura'),
(3, 'Filosofia'),
(4, 'Informática'),
(5, 'Jornalismo')

PRAGMA foreign_keys = ON;
INSERT INTO TB_MATRICULA(
  CODIGO_CURSO,
  CODIGO_ALUNO
)
VALUES
(1, 1),
(1, 2),
(2, 3),
(5, 3);

-- EXERCICIO 1

INSERT INTO TB_ALUNO (
CODIGO_ALUNO, 
NOME_ALUNO, 
ANO_NASCIMENTO, 
EMAIL,
SEXO)
VALUES
(4, 'Pedro César', '2000', 'pedro@provaSQL.com.br', 'M')

INSERT INTO TB_MATRICULA(CODIGO_CURSO, CODIGO_ALUNO)
VALUES (4,4)

-- EXERCICIO 2

SELECT 
TB_ALUNO.NOME_ALUNO AS ALUNO,
TB_CURSO.NOME_CURSO AS CURSO
FROM TB_ALUNO
INNER JOIN TB_MATRICULA 
ON TB_MATRICULA.CODIGO_ALUNO = TB_ALUNO.CODIGO_ALUNO
INNER JOIN TB_CURSO 
ON TB_CURSO.CODIGO_CURSO = TB_MATRICULA.CODIGO_CURSO


-- EXERCICIO 3

SELECT EMAIL
FROM TB_ALUNO
WHERE (2024-ANO_NASCIMENTO) > 18

-- EXERCICIO 4

SELECT COUNT(CODIGO_ALUNO) AS TOTAL_ALUNO
FROM TB_ALUNO

-- EXERCICIO 5

SELECT 
TB_CURSO.NOME_CURSO AS CURSO,
IFNULL(COUNT(TB_ALUNO.CODIGO_ALUNO),0) AS TOTAL_POR_CURSO
FROM TB_ALUNO
INNER JOIN TB_MATRICULA 
ON TB_MATRICULA.CODIGO_ALUNO = TB_ALUNO.CODIGO_ALUNO
INNER JOIN TB_CURSO 
ON TB_CURSO.CODIGO_CURSO = TB_MATRICULA.CODIGO_CURSO
GROUP BY NOME_CURSO

-- EXERCICIO 6

SELECT NOME_ALUNO
FROM TB_ALUNO
WHERE (substr(date(), 1, 4) - ANO_NASCIMENTO) > 18;

-- EXERCICIO 7

SELECT NOME_ALUNO
FROM TB_ALUNO
WHERE SEXO LIKE 'F'

-- EXERCICIO 8

SELECT 
TB_ALUNO.NOME_ALUNO AS ALUNAS
FROM TB_ALUNO
INNER JOIN TB_MATRICULA 
ON TB_MATRICULA.CODIGO_ALUNO = TB_ALUNO.CODIGO_ALUNO
INNER JOIN TB_CURSO 
ON TB_CURSO.CODIGO_CURSO = TB_MATRICULA.CODIGO_CURSO
WHERE NOME_CURSO LIKE 'MEDICINA' AND SEXO LIKE 'F'

-- EXERCICIO 9

SELECT NOME_CURSO
FROM TB_CURSO
ORDER BY NOME_CURSO ASC




